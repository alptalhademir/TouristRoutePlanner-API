// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TouristRoutePlanner.API.Data;

#nullable disable

namespace TouristRoutePlanner.API.Migrations.TouristRoutePlannerDb
{
    [DbContext(typeof(TouristRoutePlannerDbContext))]
    [Migration("20250408222552_AddingCityFields")]
    partial class AddingCityFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Distance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DestinationPlaceExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DrivingDistance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginPlaceExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WalkingDistance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalkingDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationPlaceExternalId");

                    b.HasIndex("OriginPlaceExternalId");

                    b.ToTable("Distances");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PriceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Places");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.PlaceType", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlaceId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("PlaceTypes");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Travel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelerType")
                        .HasColumnType("int");

                    b.Property<Guid>("TravelerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.TravelPlace", b =>
                {
                    b.Property<Guid>("TravelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TravelId", "PlaceId");

                    b.HasIndex("PlaceId");

                    b.ToTable("TravelPlaces");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.TravelType", b =>
                {
                    b.Property<Guid>("TravelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TravelId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("TravelTypes");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Type", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Distance", b =>
                {
                    b.HasOne("TouristRoutePlanner.API.Models.Place", "DestinationPlace")
                        .WithMany()
                        .HasForeignKey("DestinationPlaceExternalId")
                        .HasPrincipalKey("ExternalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TouristRoutePlanner.API.Models.Place", "OriginPlace")
                        .WithMany()
                        .HasForeignKey("OriginPlaceExternalId")
                        .HasPrincipalKey("ExternalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationPlace");

                    b.Navigation("OriginPlace");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.PlaceType", b =>
                {
                    b.HasOne("TouristRoutePlanner.API.Models.Place", "Place")
                        .WithMany("PlaceTypes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristRoutePlanner.API.Models.Type", "Type")
                        .WithMany("PlaceTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.TravelPlace", b =>
                {
                    b.HasOne("TouristRoutePlanner.API.Models.Place", "Place")
                        .WithMany("TravelPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristRoutePlanner.API.Models.Travel", "Travel")
                        .WithMany("TravelPlaces")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.TravelType", b =>
                {
                    b.HasOne("TouristRoutePlanner.API.Models.Travel", "Travel")
                        .WithMany("TravelTypes")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristRoutePlanner.API.Models.Type", "Type")
                        .WithMany("TravelTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Travel");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Place", b =>
                {
                    b.Navigation("PlaceTypes");

                    b.Navigation("TravelPlaces");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Travel", b =>
                {
                    b.Navigation("TravelPlaces");

                    b.Navigation("TravelTypes");
                });

            modelBuilder.Entity("TouristRoutePlanner.API.Models.Type", b =>
                {
                    b.Navigation("PlaceTypes");

                    b.Navigation("TravelTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
